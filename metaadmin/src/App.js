import React, { useState, useEffect } from 'react';
import './index.css';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3500/api';

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState(null);
  const [companies, setCompanies] = useState([]);
  const [companiesLoading, setCompaniesLoading] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingCompany, setEditingCompany] = useState(null);

  // –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
  const [formData, setFormData] = useState({
    name: '',
    domain: '',
    description: '',
    logo: '',
    status: 'active'
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/meta/companies`, {
        credentials: 'include'
      });
      
      if (response.ok) {
        setIsLoggedIn(true);
        fetchCompanies();
      } else {
        setIsLoggedIn(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      setIsLoggedIn(false);
    }
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage(null);

    try {
      const response = await fetch(`${API_BASE_URL}/meta/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({ username, password }),
      });

      const data = await response.json();

      if (data.success) {
        setIsLoggedIn(true);
        setMessage({ type: 'success', text: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!' });
        fetchCompanies();
      } else {
        setMessage({ type: 'error', text: data.message });
      }
    } catch (error) {
      setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' });
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    // –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫—É–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–µ–Ω logout endpoint)
    document.cookie = 'isLogged=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
    setIsLoggedIn(false);
    setCompanies([]);
    setMessage(null);
  };

  const fetchCompanies = async () => {
    setCompaniesLoading(true);
    try {
      const response = await fetch(`${API_BASE_URL}/meta/companies`, {
        credentials: 'include'
      });
      const data = await response.json();

      if (data.success) {
        setCompanies(data.companies);
      } else {
        setMessage({ type: 'error', text: data.message });
      }
    } catch (error) {
      setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π' });
    } finally {
      setCompaniesLoading(false);
    }
  };

  const handleAddCompany = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch(`${API_BASE_URL}/meta/companies`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (data.success) {
        setMessage({ type: 'success', text: '–ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!' });
        setFormData({ name: '', domain: '', description: '', logo: '', status: 'active' });
        setShowAddForm(false);
        fetchCompanies();
      } else {
        setMessage({ type: 'error', text: data.message });
      }
    } catch (error) {
      setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏' });
    } finally {
      setLoading(false);
    }
  };

  const handleEditCompany = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const response = await fetch(`${API_BASE_URL}/meta/companies/${editingCompany.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (data.success) {
        setMessage({ type: 'success', text: '–ö–æ–º–ø–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!' });
        setFormData({ name: '', domain: '', description: '', logo: '', status: 'active' });
        setEditingCompany(null);
        fetchCompanies();
      } else {
        setMessage({ type: 'error', text: data.message });
      }
    } catch (error) {
      setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏' });
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteCompany = async (id) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–ø–∞–Ω–∏—é?')) {
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE_URL}/meta/companies/${id}`, {
        method: 'DELETE',
        credentials: 'include'
      });

      const data = await response.json();

      if (data.success) {
        setMessage({ type: 'success', text: '–ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!' });
        fetchCompanies();
      } else {
        setMessage({ type: 'error', text: data.message });
      }
    } catch (error) {
      setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏' });
    } finally {
      setLoading(false);
    }
  };

  const startEdit = (company) => {
    setEditingCompany(company);
    setFormData({
      name: company.name,
      domain: company.domain,
      description: company.description,
      logo: company.logo,
      status: company.status
    });
    setShowAddForm(true);
  };

  const cancelEdit = () => {
    setEditingCompany(null);
    setFormData({ name: '', domain: '', description: '', logo: '', status: 'active' });
    setShowAddForm(false);
  };

  if (!isLoggedIn) {
    return (
      <div className="container">
        <div className="login-form">
          <h1>üîê Meta Admin Login</h1>
          {message && (
            <div className={`message ${message.type}`}>{message.text}</div>
          )}
          <form onSubmit={handleLogin}>
            <div className="form-group">
              <label htmlFor="username">–õ–æ–≥–∏–Ω:</label>
              <input
                type="text"
                id="username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                required
                disabled={loading}
              />
            </div>
            <div className="form-group">
              <label htmlFor="password">–ü–∞—Ä–æ–ª—å:</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loading}
              />
            </div>
            <button type="submit" className="btn" disabled={loading}>
              {loading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
            </button>
          </form>
          <div style={{ marginTop: '20px', fontSize: '14px', color: '#666' }}>
            <strong>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong><br />
            –õ–æ–≥–∏–Ω: admin<br />
            –ü–∞—Ä–æ–ª—å: qwerty
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container">
      <div className="header">
        <h1>üè¢ Meta Admin Panel</h1>
        <button className="logout-btn" onClick={handleLogout}>
          –í—ã–π—Ç–∏
        </button>
        <div style={{ clear: 'both' }}></div>
      </div>

      {message && (
        <div className={`message ${message.type}`}>{message.text}</div>
      )}

      {showAddForm && (
        <div className="add-company-form">
          <h2>{editingCompany ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é' : '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é'}</h2>
          <form onSubmit={editingCompany ? handleEditCompany : handleAddCompany}>
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:</label>
                <input
                  type="text"
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  required
                  disabled={loading}
                />
              </div>
              <div className="form-group">
                <label htmlFor="domain">–î–æ–º–µ–Ω:</label>
                <input
                  type="text"
                  id="domain"
                  value={formData.domain}
                  onChange={(e) => setFormData({...formData, domain: e.target.value})}
                  required
                  disabled={loading}
                />
              </div>
            </div>
            <div className="form-group">
              <label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
              <input
                type="text"
                id="description"
                value={formData.description}
                onChange={(e) => setFormData({...formData, description: e.target.value})}
                disabled={loading}
              />
            </div>
            <div className="form-group">
              <label htmlFor="logo">–õ–æ–≥–æ—Ç–∏–ø (URL):</label>
              <input
                type="url"
                id="logo"
                value={formData.logo}
                onChange={(e) => setFormData({...formData, logo: e.target.value})}
                disabled={loading}
              />
            </div>
            <div className="form-group">
              <label htmlFor="status">–°—Ç–∞—Ç—É—Å:</label>
              <select
                id="status"
                value={formData.status}
                onChange={(e) => setFormData({...formData, status: e.target.value})}
                disabled={loading}
              >
                <option value="active">–ê–∫—Ç–∏–≤–Ω–∞</option>
                <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω–∞</option>
                <option value="suspended">–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</option>
              </select>
            </div>
            <div className="btn-group">
              <button type="submit" className="btn btn-success btn-small" disabled={loading}>
                {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (editingCompany ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å')}
              </button>
              <button type="button" className="btn btn-secondary btn-small" onClick={cancelEdit} disabled={loading}>
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </form>
        </div>
      )}

      {!showAddForm && (
        <div style={{ textAlign: 'center', marginBottom: '20px' }}>
          <button 
            className="btn btn-success" 
            onClick={() => setShowAddForm(true)}
            disabled={loading}
          >
            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é
          </button>
        </div>
      )}

      <div className="companies-grid">
        {companiesLoading ? (
          <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π...</div>
        ) : companies.length === 0 ? (
          <div className="loading">–ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
        ) : (
          companies.map((company) => (
            <div key={company.id} className="company-card">
              <h3>{company.name}</h3>
              <p><strong>–î–æ–º–µ–Ω:</strong> {company.domain}</p>
              {company.description && (
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {company.description}</p>
              )}
              <p>
                <strong>–°—Ç–∞—Ç—É—Å:</strong> 
                <span className={`status ${company.status}`}>
                  {company.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : 
                   company.status === 'inactive' ? '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞' : '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
                </span>
              </p>
              <p><strong>–°–æ–∑–¥–∞–Ω–∞:</strong> {new Date(company.createdAt).toLocaleDateString('ru-RU')}</p>
              <div className="btn-group">
                <button 
                  className="btn btn-small" 
                  onClick={() => startEdit(company)}
                  disabled={loading}
                >
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
                <button 
                  className="btn btn-danger btn-small" 
                  onClick={() => handleDeleteCompany(company.id)}
                  disabled={loading}
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
}

export default App;
