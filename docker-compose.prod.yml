services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    volumes:
      # Для production с реальным доменом раскомментируйте эти строки:
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      # Теперь фронтенд будет обращаться к API через nginx
      - NEXT_PUBLIC_BACKEND_URL=https://justcreatedsite.ru/api
      # Сохраняем console.log в production для отладки
      - KEEP_CONSOLE=true
    restart: unless-stopped
    expose:
      - "4000"
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3500
    restart: unless-stopped
    ports:
      - 3500:3500
    expose:
      - "3500"
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - app-network

  postgresql:
    image: postgres:17
    container_name: my-postgresql
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: your_database
    ports:
      - "5434:5432"
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U username -d your_database"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    

networks:
  app-network:
    driver: bridge

volumes:
  nginx_logs:
  postgresql-data: